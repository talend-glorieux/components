// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.talend.components.performance.filedelimited;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: fileOutputDelimited Purpose: Bench for the outputdelimited<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class FileOutputDelimited implements TalendJob {

    // could be removed
    public final Object obj = new Object();

    // for transmiting parameters purpose
    private Object valueObject = null;

    public Object getValueObject() {
        return this.valueObject;
    }

    public void setValueObject(Object valueObject) {
        this.valueObject = valueObject;
    }

    private final static String defaultCharset = java.nio.charset.Charset
            .defaultCharset().name();

    private final static String utf8Charset = "UTF-8";

    // create and load default properties
    private java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    public class ContextProperties extends java.util.Properties {

        private static final long serialVersionUID = 1L;

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public void synchronizeContext() {

            if (linegenerated != null) {

                this.setProperty("linegenerated", linegenerated.toString());

            }

        }

        public Integer linegenerated;

        public Integer getLinegenerated() {
            return this.linegenerated;
        }
    }

    private ContextProperties context = new ContextProperties();

    public ContextProperties getContext() {
        return this.context;
    }

    private final String jobVersion = "0.1";
    private final String jobName = "fileOutputDelimited";
    private final String projectName = "LOCAL_PROJECT";
    public Integer errorCode = null;
    private String currentComponent = "";

    private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

    private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    private RunStat runStat = new RunStat();

    // OSGi DataSource
    private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

    public void setDataSources(
            java.util.Map<String, javax.sql.DataSource> dataSources) {
        java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
        for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
                .entrySet()) {
            talendDataSources.put(
                    dataSourceEntry.getKey(),
                    new routines.system.TalendDataSource(dataSourceEntry
                            .getValue()));
        }
        globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
    }

    private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
            new java.io.BufferedOutputStream(baos));

    public String getExceptionStackTrace() {
        if ("failure".equals(this.getStatus())) {
            errorMessagePS.flush();
            return baos.toString();
        }
        return null;
    }

    private Exception exception;

    public Exception getException() {
        if ("failure".equals(this.getStatus())) {
            return this.exception;
        }
        return null;
    }

    private class TalendException extends Exception {

        private static final long serialVersionUID = 1L;

        private java.util.Map<String, Object> globalMap = null;
        private Exception e = null;
        private String currentComponent = null;
        private String virtualComponentName = null;

        public void setVirtualComponentName(String virtualComponentName) {
            this.virtualComponentName = virtualComponentName;
        }

        private TalendException(Exception e, String errorComponent,
                final java.util.Map<String, Object> globalMap) {
            this.currentComponent = errorComponent;
            this.globalMap = globalMap;
            this.e = e;
        }

        public Exception getException() {
            return this.e;
        }

        public String getCurrentComponent() {
            return this.currentComponent;
        }

        public String getExceptionCauseMessage(Exception e) {
            Throwable cause = e;
            String message = null;
            int i = 10;
            while (null != cause && 0 < i--) {
                message = cause.getMessage();
                if (null == message) {
                    cause = cause.getCause();
                } else {
                    break;
                }
            }
            if (null == message) {
                message = e.getClass().getName();
            }
            return message;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                if (virtualComponentName != null
                        && currentComponent.indexOf(virtualComponentName + "_") == 0) {
                    globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
                            getExceptionCauseMessage(e));
                }
                globalMap.put(currentComponent + "_ERROR_MESSAGE",
                        getExceptionCauseMessage(e));
                System.err
                        .println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                if (e instanceof TalendException) {
                    e.printStackTrace();
                } else {
                    e.printStackTrace();
                    e.printStackTrace(errorMessagePS);
                    FileOutputDelimited.this.exception = e;
                }
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass()
                            .getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(FileOutputDelimited.this, new Object[] {
                                    e, currentComponent, globalMap });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (Exception e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tRowGenerator_2_error(Exception exception,
            String errorComponent, final java.util.Map<String, Object> globalMap)
            throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tFileOutputDelimited_2_error(Exception exception,
            String errorComponent, final java.util.Map<String, Object> globalMap)
            throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tRowGenerator_2_onSubJobError(Exception exception,
            String errorComponent, final java.util.Map<String, Object> globalMap)
            throws TalendException {

        resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
                .currentThread().getId() + "", "FATAL", "",
                exception.getMessage(),
                ResumeUtil.getExceptionStackTrace(exception), "");

    }

    public static class row2Struct implements
            routines.system.IPersistableRow<row2Struct> {
        final static byte[] commonByteArrayLock_LOCAL_PROJECT_fileOutputDelimited = new byte[0];
        static byte[] commonByteArray_LOCAL_PROJECT_fileOutputDelimited = new byte[0];

        public String Column1;

        public String getColumn1() {
            return this.Column1;
        }

        public String Column2;

        public String getColumn2() {
            return this.Column2;
        }

        public String Column3;

        public String getColumn3() {
            return this.Column3;
        }

        public String Column4;

        public String getColumn4() {
            return this.Column4;
        }

        public String Column5;

        public String getColumn5() {
            return this.Column5;
        }

        public String Column6;

        public String getColumn6() {
            return this.Column6;
        }

        public String Column7;

        public String getColumn7() {
            return this.Column7;
        }

        public String Column8;

        public String getColumn8() {
            return this.Column8;
        }

        public String Column9;

        public String getColumn9() {
            return this.Column9;
        }

        public String Column10;

        public String getColumn10() {
            return this.Column10;
        }

        public String Column11;

        public String getColumn11() {
            return this.Column11;
        }

        public String Column12;

        public String getColumn12() {
            return this.Column12;
        }

        public String Column13;

        public String getColumn13() {
            return this.Column13;
        }

        public String Column14;

        public String getColumn14() {
            return this.Column14;
        }

        public String Column15;

        public String getColumn15() {
            return this.Column15;
        }

        public String Column16;

        public String getColumn16() {
            return this.Column16;
        }

        public String Column17;

        public String getColumn17() {
            return this.Column17;
        }

        public String Column18;

        public String getColumn18() {
            return this.Column18;
        }

        public String Column19;

        public String getColumn19() {
            return this.Column19;
        }

        public String Column20;

        public String getColumn20() {
            return this.Column20;
        }

        public String Column21;

        public String getColumn21() {
            return this.Column21;
        }

        public String Column22;

        public String getColumn22() {
            return this.Column22;
        }

        public String Column23;

        public String getColumn23() {
            return this.Column23;
        }

        public String Column24;

        public String getColumn24() {
            return this.Column24;
        }

        public String Column25;

        public String getColumn25() {
            return this.Column25;
        }

        public String Column26;

        public String getColumn26() {
            return this.Column26;
        }

        public String Column27;

        public String getColumn27() {
            return this.Column27;
        }

        public String Column28;

        public String getColumn28() {
            return this.Column28;
        }

        public String Column29;

        public String getColumn29() {
            return this.Column29;
        }

        public String Column30;

        public String getColumn30() {
            return this.Column30;
        }

        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_LOCAL_PROJECT_fileOutputDelimited.length) {
                    if (length < 1024
                            && commonByteArray_LOCAL_PROJECT_fileOutputDelimited.length == 0) {
                        commonByteArray_LOCAL_PROJECT_fileOutputDelimited = new byte[1024];
                    } else {
                        commonByteArray_LOCAL_PROJECT_fileOutputDelimited = new byte[2 * length];
                    }
                }
                dis.readFully(
                        commonByteArray_LOCAL_PROJECT_fileOutputDelimited, 0,
                        length);
                strReturn = new String(
                        commonByteArray_LOCAL_PROJECT_fileOutputDelimited, 0,
                        length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos)
                throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_LOCAL_PROJECT_fileOutputDelimited) {

                try {

                    int length = 0;

                    this.Column1 = readString(dis);

                    this.Column2 = readString(dis);

                    this.Column3 = readString(dis);

                    this.Column4 = readString(dis);

                    this.Column5 = readString(dis);

                    this.Column6 = readString(dis);

                    this.Column7 = readString(dis);

                    this.Column8 = readString(dis);

                    this.Column9 = readString(dis);

                    this.Column10 = readString(dis);

                    this.Column11 = readString(dis);

                    this.Column12 = readString(dis);

                    this.Column13 = readString(dis);

                    this.Column14 = readString(dis);

                    this.Column15 = readString(dis);

                    this.Column16 = readString(dis);

                    this.Column17 = readString(dis);

                    this.Column18 = readString(dis);

                    this.Column19 = readString(dis);

                    this.Column20 = readString(dis);

                    this.Column21 = readString(dis);

                    this.Column22 = readString(dis);

                    this.Column23 = readString(dis);

                    this.Column24 = readString(dis);

                    this.Column25 = readString(dis);

                    this.Column26 = readString(dis);

                    this.Column27 = readString(dis);

                    this.Column28 = readString(dis);

                    this.Column29 = readString(dis);

                    this.Column30 = readString(dis);

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                writeString(this.Column1, dos);

                // String

                writeString(this.Column2, dos);

                // String

                writeString(this.Column3, dos);

                // String

                writeString(this.Column4, dos);

                // String

                writeString(this.Column5, dos);

                // String

                writeString(this.Column6, dos);

                // String

                writeString(this.Column7, dos);

                // String

                writeString(this.Column8, dos);

                // String

                writeString(this.Column9, dos);

                // String

                writeString(this.Column10, dos);

                // String

                writeString(this.Column11, dos);

                // String

                writeString(this.Column12, dos);

                // String

                writeString(this.Column13, dos);

                // String

                writeString(this.Column14, dos);

                // String

                writeString(this.Column15, dos);

                // String

                writeString(this.Column16, dos);

                // String

                writeString(this.Column17, dos);

                // String

                writeString(this.Column18, dos);

                // String

                writeString(this.Column19, dos);

                // String

                writeString(this.Column20, dos);

                // String

                writeString(this.Column21, dos);

                // String

                writeString(this.Column22, dos);

                // String

                writeString(this.Column23, dos);

                // String

                writeString(this.Column24, dos);

                // String

                writeString(this.Column25, dos);

                // String

                writeString(this.Column26, dos);

                // String

                writeString(this.Column27, dos);

                // String

                writeString(this.Column28, dos);

                // String

                writeString(this.Column29, dos);

                // String

                writeString(this.Column30, dos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("Column1=" + Column1);
            sb.append(",Column2=" + Column2);
            sb.append(",Column3=" + Column3);
            sb.append(",Column4=" + Column4);
            sb.append(",Column5=" + Column5);
            sb.append(",Column6=" + Column6);
            sb.append(",Column7=" + Column7);
            sb.append(",Column8=" + Column8);
            sb.append(",Column9=" + Column9);
            sb.append(",Column10=" + Column10);
            sb.append(",Column11=" + Column11);
            sb.append(",Column12=" + Column12);
            sb.append(",Column13=" + Column13);
            sb.append(",Column14=" + Column14);
            sb.append(",Column15=" + Column15);
            sb.append(",Column16=" + Column16);
            sb.append(",Column17=" + Column17);
            sb.append(",Column18=" + Column18);
            sb.append(",Column19=" + Column19);
            sb.append(",Column20=" + Column20);
            sb.append(",Column21=" + Column21);
            sb.append(",Column22=" + Column22);
            sb.append(",Column23=" + Column23);
            sb.append(",Column24=" + Column24);
            sb.append(",Column25=" + Column25);
            sb.append(",Column26=" + Column26);
            sb.append(",Column27=" + Column27);
            sb.append(",Column28=" + Column28);
            sb.append(",Column29=" + Column29);
            sb.append(",Column30=" + Column30);
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(),
                        object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    public void tRowGenerator_2Process(
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";

        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {

            String currentMethodName = new java.lang.Exception()
                    .getStackTrace()[0].getMethodName();
            boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
            if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
                                                                                    // the
                                                                                    // resume
                globalResumeTicket = true;

                row2Struct row2 = new row2Struct();

                /**
                 * [tFileOutputDelimited_2 begin ] start
                 */

                ok_Hash.put("tFileOutputDelimited_2", false);
                start_Hash.put("tFileOutputDelimited_2",
                        System.currentTimeMillis());

                currentComponent = "tFileOutputDelimited_2";

                if (execStat) {
                    if (resourceMap.get("inIterateVComp") == null) {

                        runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

                    }
                }

                int tos_count_tFileOutputDelimited_2 = 0;

                String fileName_tFileOutputDelimited_2 = "";
                fileName_tFileOutputDelimited_2 = (new java.io.File(
                        "D:/TOSWorkspace/Performance/out.csv"))
                        .getAbsolutePath().replace("\\", "/");
                String fullName_tFileOutputDelimited_2 = null;
                String extension_tFileOutputDelimited_2 = null;
                String directory_tFileOutputDelimited_2 = null;
                if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                    if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
                            .lastIndexOf("/")) {
                        fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                        extension_tFileOutputDelimited_2 = "";
                    } else {
                        fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                                .substring(0, fileName_tFileOutputDelimited_2
                                        .lastIndexOf("."));
                        extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                                .substring(fileName_tFileOutputDelimited_2
                                        .lastIndexOf("."));
                    }
                    directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("/"));
                } else {
                    if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                        fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                                .substring(0, fileName_tFileOutputDelimited_2
                                        .lastIndexOf("."));
                        extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                                .substring(fileName_tFileOutputDelimited_2
                                        .lastIndexOf("."));
                    } else {
                        fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                        extension_tFileOutputDelimited_2 = "";
                    }
                    directory_tFileOutputDelimited_2 = "";
                }
                boolean isFileGenerated_tFileOutputDelimited_2 = true;
                java.io.File filetFileOutputDelimited_2 = new java.io.File(
                        fileName_tFileOutputDelimited_2);
                globalMap.put("tFileOutputDelimited_2_FILE_NAME",
                        fileName_tFileOutputDelimited_2);
                int nb_line_tFileOutputDelimited_2 = 0;
                int splitEvery_tFileOutputDelimited_2 = 1000;
                int splitedFileNo_tFileOutputDelimited_2 = 0;
                int currentRow_tFileOutputDelimited_2 = 0;

                final String OUT_DELIM_tFileOutputDelimited_2 = /**
                 * Start field
                 * tFileOutputDelimited_2:FIELDSEPARATOR
                 */
                ";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
                ;

                final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                 * Start
                 * field tFileOutputDelimited_2:ROWSEPARATOR
                 */
                "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
                ;

                // create directory only if not exists
                if (directory_tFileOutputDelimited_2 != null
                        && directory_tFileOutputDelimited_2.trim().length() != 0) {
                    java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
                            directory_tFileOutputDelimited_2);
                    if (!dir_tFileOutputDelimited_2.exists()) {
                        dir_tFileOutputDelimited_2.mkdirs();
                    }
                }

                // routines.system.Row
                java.io.Writer outtFileOutputDelimited_2 = null;

                java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
                        fileName_tFileOutputDelimited_2);
                if (fileToDelete_tFileOutputDelimited_2.exists()) {
                    fileToDelete_tFileOutputDelimited_2.delete();
                }
                outtFileOutputDelimited_2 = new java.io.BufferedWriter(
                        new java.io.OutputStreamWriter(
                                new java.io.FileOutputStream(
                                        fileName_tFileOutputDelimited_2, false),
                                "US-ASCII"));

                resourceMap.put("out_tFileOutputDelimited_2",
                        outtFileOutputDelimited_2);
                resourceMap.put("nb_line_tFileOutputDelimited_2",
                        nb_line_tFileOutputDelimited_2);

                /**
                 * [tFileOutputDelimited_2 begin ] stop
                 */

                /**
                 * [tRowGenerator_2 begin ] start
                 */

                ok_Hash.put("tRowGenerator_2", false);
                start_Hash.put("tRowGenerator_2", System.currentTimeMillis());

                currentComponent = "tRowGenerator_2";

                int tos_count_tRowGenerator_2 = 0;

                int nb_line_tRowGenerator_2 = 0;
                int nb_max_row_tRowGenerator_2 = context.linegenerated;

                class tRowGenerator_2Randomizer {
                    public String getRandomColumn1() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn2() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn3() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn4() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn5() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn6() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn7() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn8() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn9() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn10() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn11() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn12() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn13() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn14() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn15() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn16() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn17() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn18() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn19() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn20() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn21() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn22() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn23() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn24() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn25() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn26() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn27() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn28() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn29() {

                        return TalendString.getAsciiRandomString(6);

                    }

                    public String getRandomColumn30() {

                        return TalendString.getAsciiRandomString(6);

                    }
                }
                tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

                for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
                    row2.Column1 = randtRowGenerator_2.getRandomColumn1();
                    row2.Column2 = randtRowGenerator_2.getRandomColumn2();
                    row2.Column3 = randtRowGenerator_2.getRandomColumn3();
                    row2.Column4 = randtRowGenerator_2.getRandomColumn4();
                    row2.Column5 = randtRowGenerator_2.getRandomColumn5();
                    row2.Column6 = randtRowGenerator_2.getRandomColumn6();
                    row2.Column7 = randtRowGenerator_2.getRandomColumn7();
                    row2.Column8 = randtRowGenerator_2.getRandomColumn8();
                    row2.Column9 = randtRowGenerator_2.getRandomColumn9();
                    row2.Column10 = randtRowGenerator_2.getRandomColumn10();
                    row2.Column11 = randtRowGenerator_2.getRandomColumn11();
                    row2.Column12 = randtRowGenerator_2.getRandomColumn12();
                    row2.Column13 = randtRowGenerator_2.getRandomColumn13();
                    row2.Column14 = randtRowGenerator_2.getRandomColumn14();
                    row2.Column15 = randtRowGenerator_2.getRandomColumn15();
                    row2.Column16 = randtRowGenerator_2.getRandomColumn16();
                    row2.Column17 = randtRowGenerator_2.getRandomColumn17();
                    row2.Column18 = randtRowGenerator_2.getRandomColumn18();
                    row2.Column19 = randtRowGenerator_2.getRandomColumn19();
                    row2.Column20 = randtRowGenerator_2.getRandomColumn20();
                    row2.Column21 = randtRowGenerator_2.getRandomColumn21();
                    row2.Column22 = randtRowGenerator_2.getRandomColumn22();
                    row2.Column23 = randtRowGenerator_2.getRandomColumn23();
                    row2.Column24 = randtRowGenerator_2.getRandomColumn24();
                    row2.Column25 = randtRowGenerator_2.getRandomColumn25();
                    row2.Column26 = randtRowGenerator_2.getRandomColumn26();
                    row2.Column27 = randtRowGenerator_2.getRandomColumn27();
                    row2.Column28 = randtRowGenerator_2.getRandomColumn28();
                    row2.Column29 = randtRowGenerator_2.getRandomColumn29();
                    row2.Column30 = randtRowGenerator_2.getRandomColumn30();
                    nb_line_tRowGenerator_2++;

                    /**
                     * [tRowGenerator_2 begin ] stop
                     */

                    /**
                     * [tRowGenerator_2 main ] start
                     */

                    currentComponent = "tRowGenerator_2";

                    tos_count_tRowGenerator_2++;

                    /**
                     * [tRowGenerator_2 main ] stop
                     */

                    /**
                     * [tFileOutputDelimited_2 main ] start
                     */

                    currentComponent = "tFileOutputDelimited_2";

                    // row2
                    // row2

                    if (execStat) {
                        runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
                    }

                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                    if (row2.Column1 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column1);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column2 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column2);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column3 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column3);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column4 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column4);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column5 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column5);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column6 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column6);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column7 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column7);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column8 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column8);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column9 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column9);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column10 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column10);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column11 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column11);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column12 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column12);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column13 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column13);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column14 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column14);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column15 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column15);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column16 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column16);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column17 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column17);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column18 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column18);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column19 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column19);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column20 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column20);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column21 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column21);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column22 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column22);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column23 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column23);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column24 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column24);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column25 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column25);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column26 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column26);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column27 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column27);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column28 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column28);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column29 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column29);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_tFileOutputDelimited_2);
                    if (row2.Column30 != null) {
                        sb_tFileOutputDelimited_2.append(row2.Column30);
                    }
                    sb_tFileOutputDelimited_2
                            .append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2",
                            nb_line_tFileOutputDelimited_2);

                    outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
                            .toString());

                    tos_count_tFileOutputDelimited_2++;

                    /**
                     * [tFileOutputDelimited_2 main ] stop
                     */

                    /**
                     * [tRowGenerator_2 end ] start
                     */

                    currentComponent = "tRowGenerator_2";

                }
                globalMap.put("tRowGenerator_2_NB_LINE",
                        nb_line_tRowGenerator_2);

                ok_Hash.put("tRowGenerator_2", true);
                end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

                /**
                 * [tRowGenerator_2 end ] stop
                 */

                /**
                 * [tFileOutputDelimited_2 end ] start
                 */

                currentComponent = "tFileOutputDelimited_2";

                if (outtFileOutputDelimited_2 != null) {
                    outtFileOutputDelimited_2.flush();
                    outtFileOutputDelimited_2.close();
                }

                globalMap.put("tFileOutputDelimited_2_NB_LINE",
                        nb_line_tFileOutputDelimited_2);
                globalMap.put("tFileOutputDelimited_2_FILE_NAME",
                        fileName_tFileOutputDelimited_2);

                resourceMap.put("finish_tFileOutputDelimited_2", true);

                if (execStat) {
                    if (resourceMap.get("inIterateVComp") == null
                            || !((Boolean) resourceMap.get("inIterateVComp"))) {
                        runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
                    }
                }

                ok_Hash.put("tFileOutputDelimited_2", true);
                end_Hash.put("tFileOutputDelimited_2",
                        System.currentTimeMillis());

                /**
                 * [tFileOutputDelimited_2 end ] stop
                 */

            }// end the resume

        } catch (java.lang.Exception e) {

            TalendException te = new TalendException(e, currentComponent,
                    globalMap);

            throw te;
        } catch (java.lang.Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            try {

                /**
                 * [tRowGenerator_2 finally ] start
                 */

                currentComponent = "tRowGenerator_2";

                /**
                 * [tRowGenerator_2 finally ] stop
                 */

                /**
                 * [tFileOutputDelimited_2 finally ] start
                 */

                currentComponent = "tFileOutputDelimited_2";

                if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

                    java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
                            .get("out_tFileOutputDelimited_2");
                    if (outtFileOutputDelimited_2 != null) {
                        outtFileOutputDelimited_2.flush();
                        outtFileOutputDelimited_2.close();
                    }

                }

                /**
                 * [tFileOutputDelimited_2 finally ] stop
                 */

            } catch (java.lang.Exception e) {
                // ignore
            } catch (java.lang.Error error) {
                // ignore
            }
            resourceMap = null;
        }

        globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
    }

    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status = "";

    public static void main(String[] args) {
        final FileOutputDelimited fileOutputDelimitedClass = new FileOutputDelimited();

        int exitCode = fileOutputDelimitedClass.runJobInTOS(args);

        System.exit(exitCode);
    }

    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
        boolean hastBufferOutput = false;

        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
        // reset status
        status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        if (pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        } else {
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket
                // can't open
                System.err.println("The statistics socket port " + portStats
                        + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            // call job/subjob with an existing context, like:
            // --context=production. if without this parameter, there will use
            // the default context instead.
            java.io.InputStream inContext = FileOutputDelimited.class
                    .getClassLoader().getResourceAsStream(
                            "local_project/fileoutputdelimited_0_1/contexts/"
                                    + contextStr + ".properties");
            if (isDefaultContext && inContext == null) {

            } else {
                if (inContext != null) {
                    // defaultProps is in order to keep the original context
                    // value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                } else {
                    // print info and job continue to run, for case:
                    // context_param is not empty.
                    System.err.println("Could not find the context "
                            + contextStr);
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }
            try {
                context.linegenerated = routines.system.ParserUtils
                        .parseTo_Integer(context.getProperty("linegenerated"));
            } catch (NumberFormatException e) {
                context.linegenerated = null;
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
            if (parentContextMap.containsKey("linegenerated")) {
                context.linegenerated = (Integer) parentContextMap
                        .get("linegenerated");
            }
        }

        // Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil
                .getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
                jobName, contextStr, jobVersion);

        List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        // Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
                parent_part_launcher, Thread.currentThread().getId() + "", "",
                "", "", "",
                resumeUtil.convertToJsonText(context, parametersToEncrypt));

        if (execStat) {
            try {
                runStat.openSocket(!isChildJob);
                runStat.setAllPID(rootPid, fatherPid, pid, jobName);
                runStat.startThreadStat(clientHost, portStats);
                runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
            } catch (java.io.IOException ioException) {
                ioException.printStackTrace();
            }
        }

        java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
        globalMap.put("concurrentHashMap", concurrentHashMap);

        long startUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();

        this.globalResumeTicket = true;// to run tPreJob

        this.globalResumeTicket = false;// to run others jobs

        try {
            errorCode = null;
            tRowGenerator_2Process(globalMap);
            if (!"failure".equals(status)) {
                status = "end";
            }
        } catch (TalendException e_tRowGenerator_2) {
            globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", -1);

            e_tRowGenerator_2.printStackTrace();

        }

        this.globalResumeTicket = true;// to run tPostJob

        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out
                    .println((endUsedMemory - startUsedMemory)
                            + " bytes memory increase when running : fileOutputDelimited");
        }

        if (execStat) {
            runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
            runStat.stopThreadStat();
        }
        int returnCode = 0;
        if (errorCode == null) {
            returnCode = status != null && status.equals("failure") ? 1 : 0;
        } else {
            returnCode = errorCode.intValue();
        }
        resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
                Thread.currentThread().getId() + "", "", "" + returnCode, "",
                "", "");

        return returnCode;

    }

    // only for OSGi env
    public void destroy() {

    }

    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid == null) {
                    context_param.put(keyValue.substring(0, index),
                            replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index),
                            keyValue.substring(index + 1));
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
        }

    }

    private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
            { "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
            { "\\t", "\t" } };

    private String replaceEscapeChars(String keyValue) {

        if (keyValue == null || ("").equals(keyValue.trim())) {
            return keyValue;
        }

        StringBuilder result = new StringBuilder();
        int currIndex = 0;
        while (currIndex < keyValue.length()) {
            int index = -1;
            // judege if the left string includes escape chars
            for (String[] strArray : escapeChars) {
                index = keyValue.indexOf(strArray[0], currIndex);
                if (index >= 0) {

                    result.append(keyValue.substring(currIndex,
                            index + strArray[0].length()).replace(strArray[0],
                            strArray[1]));
                    currIndex = index + strArray[0].length();
                    break;
                }
            }
            // if the left string doesn't include escape chars, append the left
            // into the result
            if (index < 0) {
                result.append(keyValue.substring(currIndex));
                currIndex = currIndex + keyValue.length();
            }
        }

        return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }

    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 54486 characters generated by Talend Open Studio for Data Integration on the
 * October 21, 2016 2:31:53 PM EEST
 ************************************************************************************************/
