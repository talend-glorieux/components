package org.talend.components.runtimeservice.util.json;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.avro.Schema;
import org.talend.components.api.properties.ComponentReferenceProperties;
import org.talend.daikon.properties.Properties;
import org.talend.daikon.properties.presentation.Widget;
import org.talend.daikon.properties.property.Property;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;

/**
 * Generate json-schema and ui-schema from {@ComponentProperties},
 * and only consider {@Property} and {@Properties} inside.
 */
public class JSONBaseTool {

    //Mapping between Property type and json-schema type
    protected static final Map<String, String> TYPE_MAPPING = new HashMap<>();

    //Mapping between Widget type and ui-schema type
    protected static final Map<String, String> WIDGET_MAPPING = new HashMap<>();

    //Mapping between Widget type and ui-schema custom type, which is not supported out-of-box
    protected static final Map<String, String> CUSTOM_WIDGET_MAPPING = new HashMap<>();
    protected static final ObjectMapper mapper = new ObjectMapper();

    static {
        TYPE_MAPPING.put(Character.class.getName(), JSONSchemaMeta.TYPE_STRING);
        TYPE_MAPPING.put(String.class.getName(), JSONSchemaMeta.TYPE_STRING);
        TYPE_MAPPING.put(CharSequence.class.getName(), JSONSchemaMeta.TYPE_STRING);
        TYPE_MAPPING.put(Schema.class.getName(), JSONSchemaMeta.TYPE_STRING);
        TYPE_MAPPING.put(Date.class.getName(), JSONSchemaMeta.TYPE_STRING);

        TYPE_MAPPING.put(Boolean.class.getName(), JSONSchemaMeta.TYPE_BOOLEAN);

        TYPE_MAPPING.put(Float.class.getName(), JSONSchemaMeta.TYPE_NUMBER);
        TYPE_MAPPING.put(Double.class.getName(), JSONSchemaMeta.TYPE_NUMBER);
        TYPE_MAPPING.put(BigDecimal.class.getName(), JSONSchemaMeta.TYPE_NUMBER);

        TYPE_MAPPING.put(Byte.class.getName(), JSONSchemaMeta.TYPE_INTEGER);
        TYPE_MAPPING.put(Short.class.getName(), JSONSchemaMeta.TYPE_INTEGER);
        TYPE_MAPPING.put(Integer.class.getName(), JSONSchemaMeta.TYPE_INTEGER);
        TYPE_MAPPING.put(Long.class.getName(), JSONSchemaMeta.TYPE_INTEGER);
        TYPE_MAPPING.put(BigInteger.class.getName(), JSONSchemaMeta.TYPE_INTEGER);

        //table is a custom widget type for UISchema
        CUSTOM_WIDGET_MAPPING.put(Widget.TABLE_WIDGET_TYPE, UISchemaMeta.CUSTOM_TYPE_TABLE);
        CUSTOM_WIDGET_MAPPING.put(Widget.SCHEMA_EDITOR_WIDGET_TYPE, UISchemaMeta.CUSTOM_TYPE_SCHEMA);
        CUSTOM_WIDGET_MAPPING.put(Widget.SCHEMA_REFERENCE_WIDGET_TYPE, UISchemaMeta.CUSTOM_TYPE_SCHEMA);
        CUSTOM_WIDGET_MAPPING.put(Widget.BUTTON_WIDGET_TYPE, UISchemaMeta.CUSTOM_TYPE_BUTTON);
        WIDGET_MAPPING.put(Widget.HIDDEN_TEXT_WIDGET_TYPE, UISchemaMeta.TYPE_PASSWORD);
        WIDGET_MAPPING.put(Widget.FILE_WIDGET_TYPE, UISchemaMeta.TYPE_FILE);
        WIDGET_MAPPING.put(Widget.TEXT_AREA_WIDGET_TYPE, UISchemaMeta.TYPE_TEXT_AREA);
        // null means use the default
        // WIDGET_MAPPING.put(Widget.DEFAULT_WIDGET_TYPE, null);
        // WIDGET_MAPPING.put(Widget.NAME_SELECTION_AREA_WIDGET_TYPE, null);
        // WIDGET_MAPPING.put(Widget.NAME_SELECTION_REFERENCE_WIDGET_TYPE, null);
        // WIDGET_MAPPING.put(Widget.COMPONENT_REFERENCE_WIDGET_TYPE, null);
        // WIDGET_MAPPING.put(Widget.ENUMERATION_WIDGET_TYPE, null);
    }

    protected ObjectNode createSchema() {
        return mapper.createObjectNode();
    }

    /**
     * the className is generated by TypeUtils.toString(), this method is try to find the class by this string but may failed
     * @param className
     * @return
     */
    protected Class findClass(String className) {
        Class<?> aClass = null;
        try {
            aClass = Class.forName(className);
        } catch (ClassNotFoundException e) {
            int lastPosition = className.lastIndexOf(".");
            if(lastPosition < 0){
                throw new RuntimeException(e);
            }
            className = className.substring(0, lastPosition) + "$" + className
                    .substring(lastPosition + 1);
            return findClass(className);
        }
        return aClass;
    }

    protected List<Property> listTProperty(Properties cProperties) {
        List<Property> propertyList = new ArrayList<>();
        Field[] allFields = cProperties.getClass().getDeclaredFields();
        for (Field field : allFields) {
            if (Property.class.isAssignableFrom(field.getType())) {
                try {
                    propertyList.add((Property) field.get(cProperties));
                } catch (IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return propertyList;
    }

    protected List<Properties> listTProperties(Properties cProperties) {
        List<Properties> propertiesList = new ArrayList<>();
        Field[] allFields = cProperties.getClass().getDeclaredFields();
        for (Field field : allFields) {
            if (Properties.class.isAssignableFrom(field.getType()) &&
                    !ComponentReferenceProperties.class.isAssignableFrom(field.getType())) {
                try {
                    propertiesList.add((Properties) field.get(cProperties));
                } catch (IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return propertiesList;
    }
}

